{"ast":null,"code":"import Cookies from 'js-cookie';\nexport async function csrfFetch(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET'; // set options.headers to an empty object if there are no headers\n\n  options.headers = options.headers || {}; // if the options.method is not 'GET', then set the \"Content-Type\" header to\n  // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n  // \"XSRF-TOKEN\" cookie\n\n  if (options.method.toUpperCase() !== 'GET') {\n    options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n    options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n  } // call the default window's fetch with the url and the options passed in\n\n\n  const res = await window.fetch(url, options); // if the response status code is 400 or above, then throw an error with the error being the response\n\n  if (res.status >= 400) throw res; // if the response status code is under 400 then return the response to the next promise chain\n\n  return res;\n} // call this to get the 'XSRF-TOKEN' cookie, only used in development\n\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}\nexport default csrfFetch;","map":{"version":3,"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","res","window","fetch","status","restoreCSRF"],"sources":["/home/jon/AppAcademy/portfolio/portfolio_1/frontend/src/store/csrf.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there are no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n    // \"XSRF-TOKEN\" cookie\n\n    if (options.method.toUpperCase() !== 'GET') {\n      options.headers['Content-Type'] =\n        options.headers['Content-Type'] || 'application/json';\n      options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n    }\n\n    // call the default window's fetch with the url and the options passed in\n    const res = await window.fetch(url, options);\n\n    // if the response status code is 400 or above, then throw an error with the error being the response\n    if (res.status >= 400) throw res;\n\n    // if the response status code is under 400 then return the response to the next promise chain\n    return res;\n}\n\n// call this to get the 'XSRF-TOKEN' cookie, only used in development\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}\n\nexport default csrfFetch;\n"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,OAAO,eAAeC,SAAf,CAAyBC,GAAzB,EAA4C;EAAA,IAAdC,OAAc,uEAAJ,EAAI;EACjD;EACAA,OAAO,CAACC,MAAR,GAAiBD,OAAO,CAACC,MAAR,IAAkB,KAAnC,CAFiD,CAGjD;;EACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACE,OAAR,IAAmB,EAArC,CAJiD,CAMjD;EACE;EACA;;EAEA,IAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,OAAiC,KAArC,EAA4C;IAC1CH,OAAO,CAACE,OAAR,CAAgB,cAAhB,IACEF,OAAO,CAACE,OAAR,CAAgB,cAAhB,KAAmC,kBADrC;IAEAF,OAAO,CAACE,OAAR,CAAgB,YAAhB,IAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC;EACD,CAd8C,CAgB/C;;;EACA,MAAMC,GAAG,GAAG,MAAMC,MAAM,CAACC,KAAP,CAAaR,GAAb,EAAkBC,OAAlB,CAAlB,CAjB+C,CAmB/C;;EACA,IAAIK,GAAG,CAACG,MAAJ,IAAc,GAAlB,EAAuB,MAAMH,GAAN,CApBwB,CAsB/C;;EACA,OAAOA,GAAP;AACH,C,CAED;;AACA,OAAO,SAASI,WAAT,GAAuB;EAC5B,OAAOX,SAAS,CAAC,mBAAD,CAAhB;AACD;AAED,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}