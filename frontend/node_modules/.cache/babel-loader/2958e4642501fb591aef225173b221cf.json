{"ast":null,"code":"import _asyncToGenerator from\"/home/jon/AppAcademy/portfolio/portfolio_1/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/home/jon/AppAcademy/portfolio/portfolio_1/frontend/node_modules/@babel/runtime/regenerator/index.js\";import Cookies from'js-cookie';export function csrfFetch(_x){return _csrfFetch.apply(this,arguments);}// call this to get the 'XSRF-TOKEN' cookie, only used in development\nfunction _csrfFetch(){_csrfFetch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var options,res,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:options=_args.length>1&&_args[1]!==undefined?_args[1]:{};// set options.method to 'GET' if there is no method\noptions.method=options.method||'GET';// set options.headers to an empty object if there are no headers\noptions.headers=options.headers||{};// if the options.method is not 'GET', then set the \"Content-Type\" header to\n// \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n// \"XSRF-TOKEN\" cookie\nif(options.method.toUpperCase()!=='GET'){options.headers['Content-Type']=options.headers['Content-Type']||'application/json';options.headers['XSRF-Token']=Cookies.get('XSRF-TOKEN');}// call the default window's fetch with the url and the options passed in\n_context.next=6;return window.fetch(url,options);case 6:res=_context.sent;if(!(res.status>=400)){_context.next=9;break;}throw res;case 9:return _context.abrupt(\"return\",res);case 10:case\"end\":return _context.stop();}}},_callee);}));return _csrfFetch.apply(this,arguments);}export function restoreCSRF(){return csrfFetch('/api/csrf/restore');}export default csrfFetch;","map":{"version":3,"names":["Cookies","csrfFetch","url","options","method","headers","toUpperCase","get","window","fetch","res","status","restoreCSRF"],"sources":["/home/jon/AppAcademy/portfolio/portfolio_1/frontend/src/store/csrf.js"],"sourcesContent":["import Cookies from 'js-cookie';\n\nexport async function csrfFetch(url, options = {}) {\n  // set options.method to 'GET' if there is no method\n  options.method = options.method || 'GET';\n  // set options.headers to an empty object if there are no headers\n  options.headers = options.headers || {};\n\n  // if the options.method is not 'GET', then set the \"Content-Type\" header to\n    // \"application/json\", and set the \"XSRF-TOKEN\" header to the value of the\n    // \"XSRF-TOKEN\" cookie\n\n    if (options.method.toUpperCase() !== 'GET') {\n      options.headers['Content-Type'] =\n        options.headers['Content-Type'] || 'application/json';\n      options.headers['XSRF-Token'] = Cookies.get('XSRF-TOKEN');\n    }\n\n    // call the default window's fetch with the url and the options passed in\n    const res = await window.fetch(url, options);\n\n    // if the response status code is 400 or above, then throw an error with the error being the response\n    if (res.status >= 400) throw res;\n\n    // if the response status code is under 400 then return the response to the next promise chain\n    return res;\n}\n\n// call this to get the 'XSRF-TOKEN' cookie, only used in development\nexport function restoreCSRF() {\n  return csrfFetch('/api/csrf/restore');\n}\n\nexport default csrfFetch;\n"],"mappings":"qRAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CAEA,eAAsBC,CAAAA,SAAtB,8CA0BA;yFA1BO,iBAAyBC,GAAzB,kJAA8BC,OAA9B,+CAAwC,EAAxC,CACL;AACAA,OAAO,CAACC,MAAR,CAAiBD,OAAO,CAACC,MAAR,EAAkB,KAAnC,CACA;AACAD,OAAO,CAACE,OAAR,CAAkBF,OAAO,CAACE,OAAR,EAAmB,EAArC,CAEA;AACE;AACA;AAEA,GAAIF,OAAO,CAACC,MAAR,CAAeE,WAAf,KAAiC,KAArC,CAA4C,CAC1CH,OAAO,CAACE,OAAR,CAAgB,cAAhB,EACEF,OAAO,CAACE,OAAR,CAAgB,cAAhB,GAAmC,kBADrC,CAEAF,OAAO,CAACE,OAAR,CAAgB,YAAhB,EAAgCL,OAAO,CAACO,GAAR,CAAY,YAAZ,CAAhC,CACD,CAED;AAhBG,sBAiBeC,CAAAA,MAAM,CAACC,KAAP,CAAaP,GAAb,CAAkBC,OAAlB,CAjBf,QAiBGO,GAjBH,oBAoBCA,GAAG,CAACC,MAAJ,EAAc,GApBf,+BAoB0BD,CAAAA,GApB1B,wCAuBIA,GAvBJ,yD,4CA2BP,MAAO,SAASE,CAAAA,WAAT,EAAuB,CAC5B,MAAOX,CAAAA,SAAS,CAAC,mBAAD,CAAhB,CACD,CAED,cAAeA,CAAAA,SAAf"},"metadata":{},"sourceType":"module"}